#!/usr/bin/env python

# python
import argparse
import pathlib
import re


REPO = pathlib.Path(__file__).parent.parent.absolute()


def create_argparser():
    argparser = argparse.ArgumentParser(
        description='Set the version across the repository.'
    )
    def version(value):
        if not re.match(r'\d+\.\d+\.\d+', value):
            raise ValueError(value)
        return value
    argparser.add_argument(
        'version',
        type=version,
        help='the version to set to'
    )
    return argparser


def update_readme(version):
    readme_path = REPO / 'README.md'
    with open(readme_path, 'r', encoding='utf-8') as f:
        readme = f.read()
    readme = re.sub(
        r'\[Version \d+\.\d+\.\d+\]',
        f'[Version {version}]',
        readme
    )
    readme = re.sub(
        r'version-\d+\.\d+\.\d+',
        f'version-{version}',
        readme
    )
    with open(readme_path, 'w', encoding='utf-8') as f:
        f.write(readme)


def update_init(version):
    init_path = REPO / 'src/pgo/__init__.py'
    with open(init_path, 'r', encoding='utf-8') as f:
        init = f.read()
    init = re.sub(
        r"__version__ = '\d+\.\d+\.\d+'",
        f"__version__ = '{version}'",
        init
    )
    with open(init_path, 'w', encoding='utf-8') as f:
        f.write(init)
        
        
def update_doc_conf(version):
    doc_conf_path = REPO / 'doc/source/conf.py'
    with open(doc_conf_path, 'r', encoding='utf-8') as f:
        doc_conf = f.read()
    doc_conf = re.sub(
        r"release = \'\d+\.\d+\.\d+\'",
        f"release = '{version}'",
        doc_conf
    )
    with open(doc_conf_path, 'w', encoding='utf-8') as f:
        f.write(doc_conf)


if __name__ == '__main__':
    argparser = create_argparser()
    args = argparser.parse_args()
    
    update_readme(args.version)
    update_init(args.version)
    
    update_doc_conf(args.version)